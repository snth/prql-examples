#!/usr/bin/env bash

# use errexit
set -eu

cleanup() {
    echo "Goodbye!"
}
trap cleanup EXIT

prql-compile() { 
  IFS=" "
  local query="$1"
  local options="${@:2}"
  if [ -n "${PRQL_COMPILE_OPTIONS:-}" ]; then
    #echo "Using PRQL_COMPILE_OPTIONS=$PRQL_COMPILE_OPTIONS" >&2
    options="${options[@]} ${PRQL_COMPILE_OPTIONS}"
  fi
  PRQL_COMPILE_OUTPUT="$( echo "$query" | eval "prqlc compile - - $options" )"
  if [[ $? -ne 0 ]]; then
    echo -e "\n# QUERY\n\n$query\n\n"
    return 1
  fi
}

capitalize() {
  local input="$1"
  local first_letter="$(echo "${input:0:1}" | tr '[:lower:]' '[:upper:]')"
  local rest_of_string="${input:1}"
  echo "${first_letter}${rest_of_string}"
}

prql-import() { 
  # looks for $name on the $prql_lib_path
  local import_name="$1"
  local output=""
  local prql_lib_path="${2:-$PRQL_LIB_PATH}"
  local separator="${3:-__}"
  local import_alias="${4:-}"
  local prefix="${5:-}"
  local found=false
  #echo "Using PRQL_LIB_PATH=$prql_lib_path" >&2
  IFS=":"
  for lib_dir in $prql_lib_path; do
    if ([[ -d "$lib_dir/$import_name" ]] && [[ -f "$lib_dir/$import_name/$(capitalize $import_name).prql" ]]); then
      # found a library
      pushd "$lib_dir/$import_name" > /dev/null
      prql-lib "$(cat "$(capitalize $import_name).prql")" "." "$separator" "$import_alias" "$prefix$import_alias$separator"
      popd > /dev/null
      output="$PRQL_LIB_OUTPUT"
      #echo "Imported $lib_dir/$import_name/$(capitalize $import_name).prql" >&2
      # Also source .env file if present for prql-exec
      if [ -f "$lib_dir/$import_name/.env" ]; then
        #cat "$lib_dir/$import_name/.env" >&2
	set -a
        source "$lib_dir/$import_name/.env"
	set +a
      fi
      found=true
      break
    elif [[ -f "$lib_dir/$import_name.prql" ]]; then
      # found a module
      output=$(cat "$lib_dir/$import_name.prql")
      #echo "Imported $lib_dir/$import_name.prql" >&2
      found=true
      break
    fi
  done
  if [ "$found" = false ]; then
    echo "ERROR: Could not import $import_name."
    return 1
  fi
  # For let statements, we prefix them with the current module name which is enough
  # as this will be repeated as the code is passed up the stack.
  output=$(echo "$output" | sed -r "s/^([[:space:]]*)let[[:space:]]+/\1let $import_alias$separator/g")
  PRQL_IMPORT_OUTPUT="$output"
}

prql-lib() { 
  # Looks for import statements in the current input and then calls prql-import for those.
  local input="$1"
  local output="$input"
  local separator="${3:-__}"
  local prefix="${5:-}"
  # Define the pattern to match lines
  local import_pattern="^import[[:space:]]\{1,\}\.\{0,1\}[[:alnum:]_-]\{1,\}[[:space:]]\{0,\}\(as[[:space:]]\{1,\}[[:alnum:]_-]\{1,\}\)\{0,1\}$"
  # Use sed to extract lines matching the pattern and capture the two words following "import"
  local import_matches=$(echo "$output" | sed -n "/$import_pattern/p")
  # Iterate over the matches using a for loop
  IFS=$'\n'  # Set the Internal Field Separator to newline to iterate over lines
  local line
  for line in $import_matches; do
    if [[ "$line" =~ ^import[[:space:]]+(\.)?([[:alnum:]_-]+)[[:space:]]*(as)?[[:space:]]*([[:alnum:]_-]+)?[[:space:]]*$ ]]; then
      local prql_lib_path="${BASH_REMATCH[1]}"
      if [[ "$prql_lib_path" == "" ]]; then
        prql_lib_path="$PRQL_LIB_PATH"
      fi
      local import_name="${BASH_REMATCH[2]}"
      local import_alias="${BASH_REMATCH[4]:-$import_name}"
      prql-import "$import_name" "$prql_lib_path" "$separator" "$import_alias"
      local import_replacement="$PRQL_IMPORT_OUTPUT"
      # Replace the import statement with the code from the module/library
      output=$(echo "$output" | awk -v import_replacement="$import_replacement" '{gsub("'"$line"'", import_replacement)}1')
      # For references to the current module/library, we have to prefix with the
      # full prefix up to this point in order to avoid name collisions.
      # This will only be done once so we have to apply the full prefix.
      # This is pretty hacky and unsafe so users should try to avoid name collisions.
      # FIXME: do we need the :space: here or is \b enough?
      output=$(echo "$output" | sed -r "s/([[:space:].]|\b)$import_alias\./\1$prefix$import_alias$separator/g")
    fi
  done
  PRQL_LIB_OUTPUT="$output"
}

prql-exec-fn() {
  # Looks for PRQL_EXEC_COMMAND and passes output to that if present
  local input=$( ([[ -z "$1" ]] || [[ "$1" == "-" ]] || [[ -f "$1" ]]) && cat "${1:--}" || echo -e "$1" )
  local options="${@:2}"
  prql-lib "$input"
  local query="$PRQL_LIB_OUTPUT"
  # DEBUG: uncomment the following query echo
  #echo -e "$query"
  prql-compile "$query"
  if [[ $? -ne 0 ]]; then
    echo -e "ERROR: Could not compile query:\n$query"
    return $?
  fi
  local sql="$PRQL_COMPILE_OUTPUT"
  #echo "$( env | grep PRQL_ )" >&2
  if [ -n "${PRQL_EXEC_COMMAND:-}" ]; then
    #echo "Using PRQL_EXEC_COMMAND=$PRQL_EXEC_COMMAND $options" >&2
    echo -e "$sql\n;" | eval "$PRQL_EXEC_COMMAND $options"
  else
    # When no PRQL_EXEC_COMMAND is given we behave just like
    # prqlc compile and echo the SQL.
    echo $sql
  fi
}

input=$( ([ $# -eq 0 ] || [[ "$1" == "-" ]] || [[ -f "$1" ]]) && cat "${1:--}" || echo -e "$1" )
prql-exec-fn "$input" "${@:2}"
